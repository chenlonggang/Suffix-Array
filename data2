#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
#ifndef BWT_AUX_H
#define BWT_AUX_H

// before including this file, first include common.h!!


#define _BW_ALPHA_SIZE ALPHABET_SIZE // already defined ALPHABET_SIZE 256 in common.h

// already defined in common.h
//typedef unsigned char uchar;
//typedef unsigned char uint8;
//typedef int int32;

// ---- struct containing the (uncompressed) bwt 
typedef struct {
  UChar *bwt;
  //int size;
  //int eof_pos;
  long size;
  long eof_pos;
} bwt_data;


// prototypes of bwt procedures defined in bwtlcp.a
//void _bw_sa2bwt(uchar *t, int32 n, int32 *sa, bwt_data *b);
//
//int32 _bw_bwt2ranknext(bwt_data *b, int32* occ, int32 *rank_next);
//int32 _bw_sa2ranknext(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_next);
//void _bw_ranknext2t(int32 *rank_next, int32 r0, bwt_data *b, uchar *t);
//void _bw_ranknext2sa(int32 *rank_next, int32 r0, int32 *sa);
//
//int32 _bw_bwt2rankprev(bwt_data *b, int32* occ, int32 *rank_prev);
//int32 _bw_sa2rankprev(uchar *t,int32 n,int32 *sa,int32 *occ,int32 *rank_prev);
//void _bw_rankprev2t(int32 *rank_prev, int32 rn1, bwt_data *b, uchar *t);
//void _bw_rankprev2sa(int32 *rank_prev, int32 n, int32 rn1, int32 *sa);

// 64 bit versions
void _bw_sa2bwt(UChar *t, long n, long *sa, bwt_data *b);

long _bw_bwt2ranknext(bwt_data *b, long* occ, long *rank_next);
long _bw_sa2ranknext(UChar *t, long n, long *sa, long *occ, long *rank_next);

void _bw_ranknext2t(long *rank_next, long r0, bwt_data *b, UChar *t);
void _bw_ranknext2sa(long *rank_next, long r0, long *sa);

long _bw_bwt2rankprev(bwt_data *b, long* occ, long *rank_prev);
long _bw_sa2rankprev(UChar *t, long n, long *sa, long *occ, long *rank_prev);
void _bw_rankprev2t(long *rank_prev, long rn1, bwt_data *b, UChar *t);
void _bw_rankprev2sa(long *rank_prev, long n, long rn1, long *sa);

#endif //BWT_AUX_H
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   global defintion for the ds suffix-sort algorithm 
   Giovanni Manzini 
   2-apr 2001
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
#ifndef COMMON_H
#define COMMON_H

/* ----------- use assertion if DEBUG!=0 ------------- */
#ifndef DEBUG
#define DEBUG 0   /* set DEBUG to 0 to remove assertions and extra checks */
#endif
#if !DEBUG
#define NDEBUG 1  /* do not compile assertions */
#endif
#include <assert.h>

/* ---------- types and costants ----------- */
#ifndef INT64
#define INT64

	typedef  long long Int64;

#endif // INT64

#ifndef UINT64
#define UINT64

	typedef unsigned  long long UInt64;

#endif // UINT64

#ifndef ULONG
#define ULONG
	typedef unsigned long ulong;
#endif

#ifndef UCHAR
#define UCHAR
	
	typedef unsigned char UChar;

#endif // UCHAR

	
typedef int				Int32;
typedef unsigned int	UInt32;
typedef unsigned short	UInt16;
typedef char				Char;
typedef unsigned char		Bool;
#define True   ((Bool)1)
#define False  ((Bool)0)
#define Cmp_overshoot 16 // can it stay like this for 64 bit version ?? 
#define Max_thresh 30

#if !defined(LLONG_MAX)
   #define LLONG_MAX 0x7fffffffffffffffLL
#endif

#ifndef min
#define min(a, b) ((a)<=(b) ? (a) : (b))
#endif

#ifndef max
#define max(a, b) ((a)>=(b) ? (a) : (b))
#endif


#define MIN(a, b) ((a)<=(b) ? (a) : (b))
#define MAX(a, b) ((a)>=(b) ? (a) : (b))


// constant and macro for marking groups

// #define SETMASK (1 << 30)      // used in ds.c to check the size of the suffix starting with sb combination of 2 char-s
						// 32 bit version ; text size at most 2^31 bytes
#define SETMASK (1LL << 62) // 64 bit version ; text size at most 2^63 bytes 1LL because it is of long long type
#define CLEARMASK (~(SETMASK))
#define IS_SORTED_BUCKET(sb) (ftab[sb] & SETMASK)
#define BUCKET_FIRST(sb) (ftab[sb]&CLEARMASK)
#define BUCKET_LAST(sb) ((ftab[sb+1]&CLEARMASK)-1)
#define BUCKET_SIZE(sb) ((ftab[sb+1]&CLEARMASK)-(ftab[sb]&CLEARMASK))

#define ALPHABET_SIZE 256 
// to avoid referring to the constants 256 and 65535 in the code in the case of changing the size of alphabet

//int scmp3(unsigned char *p, unsigned char *q, int *l, int maxl);
long scmp3(unsigned char *p, unsigned char *q, long *l, long maxl); // 64 bit version
void pretty_putchar(int c);

#endif //COMMON_H
#ifndef DS_SORT_H
#define DS_SORT_H

#include"common.h"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   Prototypes for the Deep Shallow Suffix Sort routines
   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */ 

#ifdef __cplusplus
extern "C"{
//void ds_ssort(unsigned char *t, int *sa, int n);
void ds_ssort(UChar *t, long *sa, long n); // 64 bit version
//int init_ds_ssort(int adist, int bs_ratio);
long init_ds_ssort(long adist, long bs_ratio);
}
#endif
void ds_ssort(UChar *t, long *sa, long n);
long init_ds_ssort(long adist, long bs_ratio);
#endif //DS_SORT_H

#ifndef LCP_AUX_H
#define LCP_AUX_H


// prototypes of the lcp construction procedures defined in
// bwtlcp.a (source files lcp_aux.c lcp5_aux.c)
// before including this file you must first include bwt_aux.h

//int *_lcp_sa2lcp_13n(uint8 *t, int n, int *sa);
//// int *_lcp_vm_9125n(uint8 *t, int n, int *sa); // definition is not included in the project
//int *_lcp_vmjk_9125n(uint8 *t, int n, int *sa);
//int *_lcp_sa2lcp_9n(uint8 *t, int n, int *sa, int *occ);
//int _lcp_sa2lcp_6n(uint8 *t, bwt_data *b, int *sa, int *occ);
////int _lcp_sa2lcp_5125n(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!
////int _lcp_sa2lcp_5125nme(uint8 *t, int n, int *sa, int *occ); // definition is not included in the project!!

// 64-bit version of code
long *_lcp_sa2lcp_13n(UChar *t, long n, long *sa); 

long *_lcp_jk_13n(UChar *t, long n, long *sa); //there is a definition in lcp_aux.c, so I've added a declaration in here!

long *_lcp_vmjk_9125n(UChar *t, long n, long *sa);
long *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//int *_lcp_sa2lcp_9n(UChar *t, long n, long *sa, long *occ);
//long _lcp_sa2lcp_6n(UChar *t, bwt_data *b, long *sa, long *occ); // bwt_data --> defined in bwt_aux.h



#endif //LCP_AUX_H

#include<stdlib.h>
#include<cstdio>
#include<sys/time.h>
#include<iostream>
#include"ds_ssort.h"
using namespace std;
void Getfile(char *filename,unsigned char **Str,unsigned long  *length) ;
int main(){
	unsigned char * T;
	unsigned long  n;
	long  int * sa;
	char * file=(char *)"/home/chen/code/csa/data/para";
	Getfile(file,&T,&n);
	sa=new long int[n];
	struct timeval start;
	struct timeval end;
	gettimeofday(&start,NULL);
	ds_ssort(T,sa,n);
	gettimeofday(&end,NULL);
	cout<<"build time "<<(end.tv_sec-start.tv_sec)<<"s"<<endl;
/*	
	for(long i=0;i<n;i++)
		cout<<sa[i]<<endl;	
*/	
	return 0;
}

void Getfile(char *filename,unsigned char **T,unsigned long *length)
{
	FILE *fp=fopen(filename,"r+");
	if(fp==NULL)
	{
		cout<<"Be sure that the file is available"<<endl;
		exit(0);
	}
	fseek(fp , 0, SEEK_END);
    (*length) = ftell(fp);
	long  int overshot=init_ds_ssort(500,2000);
	(*T)=new unsigned char[(*length)+overshot];
	fseek(fp , 0, SEEK_SET);

	long  int e=0;
	long  int num=0;
	while((e=fread((*T)+num,sizeof(unsigned char),(*length)-num,fp))!=0)
		num=num+e;
	if(num!=(*length))
		exit(0);
	fclose(fp);
}
